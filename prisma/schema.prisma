// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  item  Item[]
  offer Offer[]
}

enum ItemType {
  Product
  Service
  Currency
  Money
}

model Item {
  id          Int         @id @default(autoincrement())
  userId      Int         @default(0)
  type        ItemType
  name        String
  description String?
  price       Float?
  duration    Int?
  level       Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  offer       Offer[]
  user        User        @relation(fields: [userId], references: [id])
  OfferItem   OfferItem[]
}

enum OfferStatus {
  PENDING
  ACCEPTED
  NEGOTIATING
  THINKING
  DECLINED
}

model Offer {
  id        Int          @id @default(autoincrement())
  itemId    Int          @default(0)
  userId    Int
  item      Item         @relation(fields: [itemId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  status    OfferStatus? @default(PENDING)
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  offerItem OfferItem[]
}

model OfferItem {
  id        Int      @id @default(autoincrement())
  itemId    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offerId   Int?
  offer     Offer?   @relation(fields: [offerId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
}
